- hosts: all
  become: yes
  gather_facts: yes
  tasks:
    - name: Cache update
      apt:
        update_cache: yes

- hosts: db,db_repl
  become: yes
  tasks:
    - name: Install PostgreSQL
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - libpq-dev
        state: present
        update_cache: yes

- hosts: db
  become: yes
  tasks:

    - name: create new user
      command: psql -c "ALTER ROLE postgres WITH PASSWORD 'postgres';"
      become: yes
      become_user: postgres 

    - name: Create database
      become: yes
      become_user: postgres
      postgresql_db:
        name: "{{DB_DATABASE}}"
        state: present

    - name: Create table email
      become_user: postgres
      community.postgresql.postgresql_table:
        db: "{{DB_DATABASE}}"
        name: email
        columns:
          - id serial primary key
          - email varchar(30) not null

    - name: Create table phone_numbers
      become_user: postgres
      community.postgresql.postgresql_table:
        db: "{{DB_DATABASE}}"
        name: phone_numbers
        columns:
          - id serial primary key
          - phone_numbers varchar(20) not null

    - name: Create db_repl_user
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{DB_REPL_USER}}"
        password: "{{DB_REPL_PASSWORD}}"
        role_attr_flags: REPLICATION

    - name: Find path to pg_hba.conf
      become_user: postgres
      command: psql -t -P format=unaligned -c 'show hba_file'
      register: pg_hba_path

    - name: Add content to pg_hba.conf
      become_user: postgres
      lineinfile:
        path: "{{ pg_hba_path.stdout }}"
        insertafter: '^# replication privilege.'
        state: present
        create: yes
        line: "{{ lookup('file', './pg_hba.conf') }}"


    - name: Create archive directory
      ansible.builtin.file:
        path: "{{archive_dir}}"
        state: directory
        owner: "{{DB_USER}}"
        mode: 0750

    - name: Get path to postgresql.conf
      command: su - postgres -c "psql -t -P format=unaligned -c 'show config_file'"
      register: postgres_conf_path

    - name: Setup postgresql.conf
      become_user: postgres
      ansible.builtin.blockinfile:
        path: "{{postgres_conf_path.stdout}}"
        block: "{{ lookup('file', './postgresql.conf') }}"
        create: yes

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted


- hosts: db_repl_host
  become: yes

  tasks:
    - name: Set Database Configuration
      blockinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        owner: postgres
        block: |
          listen_addresses = '*'
          port = {{ DB_REPL_PORT }}
      become: yes
    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
      become: yes
    - name: Deleting Databases
      command: rm -rf /var/lib/postgresql/14/main/
      become: yes
      become_user: postgres
    - name: Performing Replication
      command: pg_basebackup -h {{ DB_HOST }} -D /var/lib/postgresql/14/main/ -p {{ DB_PORT }} -U {{ DB_REPL_USER }} -vP -w
      become: yes
      become_user: postgres
      environment:
        PGPASSWORD: "{{ DB_REPL_PASSWORD }}"
    - name: Set privileges
      command: chown -R postgres:postgres /var/lib/postgresql/
      become: yes
      become_user: postgres


- hosts: bot
  become: yes
  tasks:
    - name: Creating directory for bot
      file:
        path: "/home/bot"
        state: directory

    - name: Git clone bot repo
      ansible.builtin.git:
        repo: "https://github.com/Sasherer/DevOps_bot.git"
        dest: "/home/bot"
        version: main
        force: true

    - name: "Installing dependencies"
      apt:
        name:
          - python3.10-dev
          - libpq-dev
          - git
          - python3-pip
        state: present

    - name: Install Python requirements
      pip:
        requirements: /home/bot/requirements.txt

    - name: Bot environment
      ansible.builtin.copy:
        content: |
          TOKEN={{TOKEN}}
          RM_HOST={{RM_HOST}}
          RM_PORT={{RM_PORT}}
          RM_USER={{RM_USER}}
          RM_PASSWORD={{RM_PASSWORD}}
          DB_USER={{DB_USER}}
          DB_PASSWORD={{DB_PASSWORD}}
          DB_HOST={{DB_HOST}}
          DB_PORT={{DB_PORT}}
          DB_DATABASE={{DB_DATABASE}}
        dest: "/home/bot/.env"

    - name: Bot start
      shell:
        cmd: python3 /home/bot/bot.py